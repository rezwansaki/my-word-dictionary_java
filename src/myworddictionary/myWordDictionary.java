package myworddictionary;

import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.SwingConstants;
import com.sun.speech.freetts.*;
import javax.swing.ImageIcon;

/**
 * Project : MyWord Dictionary 
 * Version : 1.0 
 * Developer : Md. Rezwan Saki Alin (http://www.alinsworld.com)
 * Start Date : 05-May-2017 
 * Completed Date : 09-May-2017 
 * Last Modified : 11-May-2017 
 * Using : NetBeans 8.2 and Java JDK 8 with Swing 
 * Used Database : For E2B and B2E - dict.db (93000+) and E2E - gutenberg.sqlite (176023)
 */
public class myWordDictionary extends javax.swing.JFrame {

    /**
     * Creates new form myWordDictionary
     */
    public myWordDictionary() {
        initComponents();
        
        /* My own */
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.png")));
        this.setLocationRelativeTo(null); //to set the frame center of the screen 
        firstTimeInitialize();
        /* End of My own */
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstSuggestion = new javax.swing.JList<>();
        lblCopyRight = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JLabel();
        btnHelp = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        lblMeaning = new javax.swing.JLabel();
        lblSearchWord = new javax.swing.JLabel();
        lblEnglishDefTitle = new javax.swing.JLabel();
        lblEngDef = new javax.swing.JLabel();
        lblAntonymTitle = new javax.swing.JLabel();
        lblAntonym = new javax.swing.JLabel();
        lblImgWord = new javax.swing.JLabel();
        lblSrchWord = new javax.swing.JLabel();
        btnEB = new javax.swing.JButton();
        btnEB1 = new javax.swing.JButton();
        cmbAdvanceSearch = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        btnSpeak = new javax.swing.JButton();
        btnEngDefSuggestion = new javax.swing.JButton();
        btnMoreSuggestion = new javax.swing.JButton();
        lblBackGround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MYWORD DICTIONARY");
        setName("frmMain"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(null);

        txtSearch.setFont(new java.awt.Font("SolaimanLipi", 0, 14)); // NOI18N
        txtSearch.setToolTipText("Type here and click search icon or press 'Enter' button if suggestion is available or not.");
        txtSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153)));
        txtSearch.setMargin(new java.awt.Insets(2, 25, 2, 2));
        txtSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSearchMouseClicked(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        getContentPane().add(txtSearch);
        txtSearch.setBounds(10, 90, 230, 28);

        lstSuggestion.setBackground(new java.awt.Color(237, 246, 249));
        lstSuggestion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153)));
        lstSuggestion.setFont(new java.awt.Font("SolaimanLipi", 0, 14)); // NOI18N
        lstSuggestion.setForeground(new java.awt.Color(0, 102, 102));
        lstSuggestion.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstSuggestion.setToolTipText("Double click any one item if single click doesn't respond.");
        lstSuggestion.setSelectionBackground(new java.awt.Color(0, 153, 153));
        lstSuggestion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstSuggestionMouseClicked(evt);
            }
        });
        lstSuggestion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lstSuggestionKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(lstSuggestion);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 120, 280, 370);

        lblCopyRight.setBackground(new java.awt.Color(0, 102, 102));
        lblCopyRight.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblCopyRight.setForeground(new java.awt.Color(218, 245, 247));
        lblCopyRight.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCopyRight.setText("Developed by Alin.");
        lblCopyRight.setToolTipText("Click here to know more...");
        lblCopyRight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153)));
        lblCopyRight.setOpaque(true);
        lblCopyRight.setPreferredSize(new java.awt.Dimension(167, 15));
        lblCopyRight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCopyRightMouseClicked(evt);
            }
        });
        getContentPane().add(lblCopyRight);
        lblCopyRight.setBounds(10, 520, 280, 37);

        jLabel6.setBackground(new java.awt.Color(204, 255, 255));
        jLabel6.setFont(new java.awt.Font("Tempus Sans ITC", 1, 32)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 255, 204));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/myworddictionary/Header.png"))); // NOI18N
        getContentPane().add(jLabel6);
        jLabel6.setBounds(30, 20, 340, 50);

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/myworddictionary/search.png"))); // NOI18N
        btnSearch.setToolTipText("Click or Press Enter key to search");
        btnSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSearchMouseClicked(evt);
            }
        });
        getContentPane().add(btnSearch);
        btnSearch.setBounds(250, 80, 40, 40);

        btnHelp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/myworddictionary/HelpButton.png"))); // NOI18N
        btnHelp.setToolTipText("Help");
        btnHelp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHelpMouseClicked(evt);
            }
        });
        getContentPane().add(btnHelp);
        btnHelp.setBounds(745, 85, 32, 32);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel1.setBackground(new java.awt.Color(253, 254, 236));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153)));

        lblMeaning.setBackground(new java.awt.Color(255, 204, 204));
        lblMeaning.setFont(new java.awt.Font("SolaimanLipi", 0, 18)); // NOI18N
        lblMeaning.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblMeaning.setText("বাংলাতে সেই শব্দটির অর্থ দেয়া থাকবে।");
        lblMeaning.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        lblSearchWord.setBackground(new java.awt.Color(255, 204, 204));
        lblSearchWord.setFont(new java.awt.Font("SolaimanLipi", 1, 18)); // NOI18N
        lblSearchWord.setForeground(new java.awt.Color(0, 102, 102));
        lblSearchWord.setText("English Word");
        lblSearchWord.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        lblEnglishDefTitle.setBackground(new java.awt.Color(255, 51, 51));
        lblEnglishDefTitle.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblEnglishDefTitle.setText("English Definition:");

        lblEngDef.setBackground(new java.awt.Color(255, 204, 204));
        lblEngDef.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblEngDef.setText("English Definition");

        lblAntonymTitle.setBackground(new java.awt.Color(255, 51, 102));
        lblAntonymTitle.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblAntonymTitle.setText("Antonym :");

        lblAntonym.setBackground(new java.awt.Color(255, 204, 204));
        lblAntonym.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblAntonym.setText("Antonym of the English Word");

        lblImgWord.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblImgWord.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImgWord.setText("Word Image");

        lblSrchWord.setFont(new java.awt.Font("SolaimanLipi", 1, 12)); // NOI18N
        lblSrchWord.setForeground(new java.awt.Color(51, 153, 255));
        lblSrchWord.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSrchWord.setText("Searching Word");
        lblSrchWord.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblImgWord, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAntonym, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMeaning, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEngDef, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAntonymTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEnglishDefTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSearchWord, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSrchWord, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(lblSrchWord)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSearchWord, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMeaning, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblAntonymTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAntonym, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addGap(21, 21, 21)
                .addComponent(lblEnglishDefTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEngDef, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblImgWord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(209, 209, 209))
        );

        jScrollPane2.setViewportView(jPanel1);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(300, 120, 480, 440);

        btnEB.setBackground(new java.awt.Color(0, 153, 153));
        btnEB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEB.setForeground(new java.awt.Color(0, 102, 102));
        btnEB.setText("E>B");
        btnEB.setToolTipText("Convert E2B and B2E");
        btnEB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153)));
        btnEB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEBActionPerformed(evt);
            }
        });
        getContentPane().add(btnEB);
        btnEB.setBounds(300, 90, 72, 28);

        btnEB1.setBackground(new java.awt.Color(0, 153, 153));
        btnEB1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEB1.setForeground(new java.awt.Color(0, 102, 102));
        btnEB1.setText("Random Word");
        btnEB1.setToolTipText("Convert E2B and B2E");
        btnEB1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153)));
        btnEB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEB1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnEB1);
        btnEB1.setBounds(380, 90, 120, 28);

        cmbAdvanceSearch.setBackground(new java.awt.Color(0, 153, 153));
        cmbAdvanceSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmbAdvanceSearch.setForeground(new java.awt.Color(0, 102, 102));
        cmbAdvanceSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "At The First", "At The End" }));
        cmbAdvanceSearch.setToolTipText("Select any one > type your word > Press 'Enter' in the 'Search Box'.");
        cmbAdvanceSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153)));
        cmbAdvanceSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAdvanceSearchActionPerformed(evt);
            }
        });
        getContentPane().add(cmbAdvanceSearch);
        cmbAdvanceSearch.setBounds(510, 90, 120, 28);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 204));
        jLabel1.setText("Advance Search :");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(510, 70, 130, 17);

        btnSpeak.setBackground(new java.awt.Color(0, 153, 153));
        btnSpeak.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSpeak.setForeground(new java.awt.Color(0, 102, 102));
        btnSpeak.setIcon(new javax.swing.ImageIcon(getClass().getResource("/myworddictionary/Speaker.png"))); // NOI18N
        btnSpeak.setText("Speak");
        btnSpeak.setToolTipText("");
        btnSpeak.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153)));
        btnSpeak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSpeakActionPerformed(evt);
            }
        });
        getContentPane().add(btnSpeak);
        btnSpeak.setBounds(640, 90, 72, 28);

        btnEngDefSuggestion.setBackground(new java.awt.Color(0, 153, 153));
        btnEngDefSuggestion.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btnEngDefSuggestion.setForeground(new java.awt.Color(0, 102, 102));
        btnEngDefSuggestion.setText("Try Similar Word");
        btnEngDefSuggestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEngDefSuggestionActionPerformed(evt);
            }
        });
        getContentPane().add(btnEngDefSuggestion);
        btnEngDefSuggestion.setBounds(10, 495, 135, 21);

        btnMoreSuggestion.setBackground(new java.awt.Color(0, 153, 153));
        btnMoreSuggestion.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btnMoreSuggestion.setForeground(new java.awt.Color(0, 102, 102));
        btnMoreSuggestion.setText("More Suggestion");
        btnMoreSuggestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoreSuggestionActionPerformed(evt);
            }
        });
        getContentPane().add(btnMoreSuggestion);
        btnMoreSuggestion.setBounds(154, 495, 135, 21);

        lblBackGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/myworddictionary/BG.jpg"))); // NOI18N
        lblBackGround.setMaximumSize(new java.awt.Dimension(1024, 1024));
        getContentPane().add(lblBackGround);
        lblBackGround.setBounds(0, 0, 800, 600);

        setSize(new java.awt.Dimension(806, 600));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
       try{
            getSuggestionWords();
            sortList(lstSuggestion);
        }catch(Exception e) {
            //System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseClicked
        try{
            clear();
            sortList(lstSuggestion);
            searchWord(); 
            getWordImage(); //try to display word meaning as an image if image data folder is exist 
            getEngDefinition();
        }catch(Exception e){

        }
    }//GEN-LAST:event_btnSearchMouseClicked

    private void lstSuggestionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstSuggestionMouseClicked
        try{
            clear();
            String selected = lstSuggestion.getSelectedValue().toString();
            txtSearch.setText(selected);
            searchWord(); 
            getWordImage(); //try to display word meaning as an image if image data folder is exist 
            getEngDefinition();
        }catch(Exception e){
            //System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_lstSuggestionMouseClicked

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        try{
            if (evt.getKeyCode() == KeyEvent.VK_ENTER){
                clear();
                sortList(lstSuggestion);
                searchWord();
                getWordImage(); //try to display word meaning as an image if image data folder is exist 
                getEngDefinition();
                txtSearch.selectAll();
            }else if (evt.getKeyCode() == KeyEvent.VK_DOWN){
                lstSuggestion.requestFocus();
                lstSuggestion.setSelectedIndex(0);
            }
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_txtSearchKeyPressed
    
    private void txtSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSearchMouseClicked

    }//GEN-LAST:event_txtSearchMouseClicked

    private void lblCopyRightMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCopyRightMouseClicked
        try{
            String copyrightInformation = "This software is developed by \n" + developer + "\n" + developerInfo + "\n © " + copyrightInfo;
            JOptionPane.showMessageDialog(null, copyrightInformation, "Copyright Information", JOptionPane.INFORMATION_MESSAGE);
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_lblCopyRightMouseClicked

    private void btnHelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHelpMouseClicked
        try{
            String projectInfo = "Description: \nThis ("+ softwareName + ") is a dictionary for English to Bangla and Bangla to English. "
                    + "\nMore than 93000 words for English to Banlga and Bangla to English. "
                    + "\nVersion : " + softwareVersion + " ("+ developedDate +")." + 
                    "\nDeveloped by using : " + makingTools + 
                    "\nDatabase : " + usedDatabase + ". \nOffline dictionary." + "\n \nProblem: Database file ('E2B and B2E') is not so good. I've collected this from the Internet.";
            String developerInformation = "Developer: \n" + developer + "\nWebsite : " + developerInfo;
            String lastUpdate = "Last update: \n" + lastUpdateInfo; 
            String tipsAndTutorials = "Tips and Tutorials : "
                    + "\nTips-1 : Please read English definition to get 100% correct meaning. Because, this English definition is collected from 'Gutenberg' which \ncontains 176023 English to English words. \nWhick is 100% correct. "
                    + "\nTips-2 : If word not found please use 'More Suggestion' button only once then 'Try Similar Word' button again and again to get similar word. "
                    + "\nTips-3 : Double click in the search box to select all search word. "
                    + "\nTips-4: For advance search, at first select any one item from Advance Search then type anything in the search box and Press 'Enter' to get result. "
                    + "\nTips-5: Double click the item of suggestion list when the single click doesn't respond. "
                    + "\nTips-6: In here I use 'Word Image' folder that is 70.8 MB. Without this folder dictionary will work. But with this folder you "
                    + "can more accurate word meaning for Bangla. \nYou can remove that folder if you want. Read this to get the path of this folder : "
                    + "\n" + usedDatabase;
            
            String helpInfo = projectInfo + "\n \n" + lastUpdate + "\n \n" + developerInformation + "\n \n" + tipsAndTutorials;
            JOptionPane.showMessageDialog(null, helpInfo, "Help", JOptionPane.INFORMATION_MESSAGE);
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_btnHelpMouseClicked

    private void btnEBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEBActionPerformed
        try{
            if(engSelected == true){
                engSelected = false;
                btnSpeak.setEnabled(false); //to disalbe speak button when search by Bangla word 
                btnEB.setText("B>E");
                txtSearch.setText("");
                txtSearch.requestFocus();
                getSuggestionWords();
                sortList(lstSuggestion);
            }else {
                btnSpeak.setEnabled(true); //to enable speak button when serach by English word 
                engSelected = true;
                btnEB.setText("E>B");
                txtSearch.setText("");
                txtSearch.requestFocus();
                getSuggestionWords();
                sortList(lstSuggestion);
            }
            
        }catch(Exception e){
            //System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnEBActionPerformed

    private void btnEB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEB1ActionPerformed
        try{
            randomWord(); //to display word randomly. 
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_btnEB1ActionPerformed

    private void btnEngDefSuggestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEngDefSuggestionActionPerformed
        try{
            trySimilarWord(); 
        }catch (Exception e){
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnEngDefSuggestionActionPerformed

    private void cmbAdvanceSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAdvanceSearchActionPerformed
        try{
            getSuggestionWords();  
        }catch(Exception e)
        {
            
        }
    }//GEN-LAST:event_cmbAdvanceSearchActionPerformed
    
    private void btnSpeakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSpeakActionPerformed
        try{
            if(engSelected == true)
            {
                vm = VoiceManager.getInstance();
                voice = vm.getVoice(VOICENAME);
                voice.allocate();
                voice.speak(lblSrchWord.getText());
            }
        }catch(Exception e)
        {
            
        }
    }//GEN-LAST:event_btnSpeakActionPerformed

    private void btnMoreSuggestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoreSuggestionActionPerformed
        try{
            getMoreSuggestionWordsEngDef(); //get more English suggestion from 'gutenberg.sqlite' database, change the database by using it
            //getSuggestionWords(); //'data.db' database
        }catch(Exception e)
        {

        }
    }//GEN-LAST:event_btnMoreSuggestionActionPerformed

    private void lstSuggestionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lstSuggestionKeyPressed
        try{
            if (evt.getKeyCode() == KeyEvent.VK_ENTER){
                clear();
                String selected = lstSuggestion.getSelectedValue().toString();
                txtSearch.setText(selected);
                searchWord();
                getWordImage(); //try to display word meaning as an image if image data folder is exist 
                getEngDefinition();            }
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_lstSuggestionKeyPressed

    /**
     * @param args the command line arguments
     */
    
    /*==================== My own code start from here ======================*/
    //Variable declaration and cleating empty object 
    //Declare global variable 
    boolean engSelected = true;
    String eng = "";
    String bn = "";
    String antonym = "";
    String engFull = "";
    String bnFull = "";
    String antonymFull = "";
    String query = "";
    String wordtype = "";
    String definition = "";
    String definitionFull = "";
    double randomNumber;
    private static final String VOICENAME="kevin16"; //FreeTTS Voice Name 
    int totalSuggestionWords = 100; //how many words will try to display for suggestion in suggestion list (Maximum value cause of slow running)    
    //Cleating object 
    DefaultListModel dm; //data model object for JList 
    Voice voice; //TTS Speech
    VoiceManager vm; //TTS Speech 
    
    //Information about software and developer 
    String softwareName = "MyWord Dictionary";
    String softwareVersion = "1.0";
    String developedDate = "11-May-2017"; //Coding Start Date : 05-May-2017, UI Design Start Date : 03-May-2017 
    String lastUpdateInfo = "11-May-2017"; //in here all information about last update such as add new function, ui design modify and date 
    String usedDatabase = "E2B and B2E 'dict.db' with 93000+ words, E2E 'Gutenberg’ with 176023 words and also 'dataAsImage' folder with 21000+ word image (path : db/dataAsImage')";
    String databaseVersion = "1.0 (11-May-2017)";
    String makingTools = "Java (JDK 8) and NetBeans 8.2 with Swing"; 
    String developer = "Md. Rezwan Saki Alin";
    String developerInfo = "Web : http://www.alinsworld.com \nEmail : rezwansaki@gmail.com";
    String copyrightInfo = "Alin 2017";
    //Information about project and developer 
    
    //Method writing
    
    //first time when open the dictionary 
    private void firstTimeInitialize() {
        try{
            lblSearchWord.setText("");
            txtSearch.requestFocus(); 
            lblEnglishDefTitle.setText("");
            lblAntonymTitle.setText("");
            lblMeaning.setText("");
            lblEngDef.setText("");
            lblAntonym.setText("");
            txtSearch.setText(""); 
            lblImgWord.setText(""); //to display word image if possible 
            lblSrchWord.setText(""); //searching word with at least one meaning 
            lblSrchWord.setVisible(false); //to hide the search word 
            getSuggestionWords(); //to display suggestion in the suggestion list box 
            sortList(lstSuggestion); //to sort the list item of the list box 
            txtSearch.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
            lstSuggestion.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        }catch(Exception e){
            
        }
    } //first time when open the dictionary 
    
    
    //randomWord display 
    private void randomWord() {
        try {
            clear();
                
            Class.forName("org.sqlite.JDBC");
            String dbURL = "jdbc:sqlite:db\\dict.db";
            Connection conn = DriverManager.getConnection(dbURL);
           engSelected = true;
           if (conn != null && engSelected == true) {
                                               
                // Select Database Table
                query = "SELECT eng FROM words"; 
        
                // create the java statement
                Statement st = conn.createStatement();
        
                // execute the query, and get a java resultset
                ResultSet rs = st.executeQuery(query);
                
                int count=0;
                // iterate through the java resultset
                while (rs.next())
                {   
                   count++;
                }

                randomNumber = Math.round(Math.random()* count);

                query = "SELECT eng FROM words WHERE serial=" + randomNumber;
                // create the java statement
                st = conn.createStatement();
                // execute the query, and get a java resultset
                rs = st.executeQuery(query);
                // iterate through the java resultset
                while (rs.next())
                {
                   eng = rs.getString("eng");
                }
                
                conn.close();
                txtSearch.setText(eng);
                lblSrchWord.setText(txtSearch.getText());
                searchWord();
                getWordImage(); //try to display word meaning as an image if image data folder is exist 
                getEngDefinition();
                txtSearch.selectAll(); 
                getSuggestionWords();
                
            } else {
                JOptionPane.showMessageDialog(null, "Database connection fail!");
            }
        } catch (SQLException | ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        } 
    } //randomWord display s
    
    //clear everything 
    private void clear() {
        try{
            lblSearchWord.setText("");
            lblEnglishDefTitle.setText("");
            lblAntonymTitle.setText("");
            lblMeaning.setText("");
            lblEngDef.setText("");
            lblAntonym.setText("");
            boolean engSelected = true;
            eng = "";
            bn = "";
            antonym = "";
            engFull = "";
            bnFull = "";
            antonymFull = "";
            query = "";
            wordtype = "";
            definition = "";
            definitionFull = "";
            lblSrchWord.setText(""); 
        }catch(Exception e){
            
        }
    } //clear method 
    
    
    //searchWord Method 
    public void searchWord()
    {
        try {
            
            Class.forName("org.sqlite.JDBC");
            String dbURL = "jdbc:sqlite:db\\dict.db";
            Connection conn = DriverManager.getConnection(dbURL);
           if (conn != null && engSelected == true) {
               
               // Select Database Table
               query = "SELECT * FROM words WHERE eng='" + txtSearch.getText() + "' COLLATE NOCASE"; //COLLATE NOCASE - case dosn't matter UPPER or lower or another 
        
                // create the java statement
                Statement st = conn.createStatement();
        
                // execute the query, and get a java resultset
                ResultSet rs = st.executeQuery(query);
                
                // iterate through the java resultset
                while (rs.next())
                {
                  eng = rs.getString("eng");
                  bn = rs.getString("bn");
                  antonym = rs.getString("antonym");

                  if(bnFull.isEmpty()) {
                      bnFull =bn;
                  }else {
                      bnFull = bnFull + ", " + bn;
                  }

                  if(antonymFull.isEmpty()) {
                      antonymFull = antonym;
                  }else {
                      antonymFull = antonymFull + ", " + antonym;
                  }
                }
                
                conn.close();
                
                //to display English word, Bangla Meaning and Antonym 
                if(antonymFull.isEmpty()){
                    lblAntonymTitle.setVisible(false);
                    lblAntonym.setVisible(false);
                }else {
                    lblAntonymTitle.setVisible(true);
                    lblAntonym.setVisible(true);
                    lblAntonymTitle.setText("Antonym:");
                    antonymFull = "<html>" + antonymFull + "</html>";
                    lblAntonym.setText(antonymFull);
                }
                
                //Creating font object to change the font and font size to fix the font problem 
                Font fontEn = new Font("SansSerif", Font.BOLD, 18);
                lblSearchWord.setFont(fontEn);
                Font fontBn = new Font("SolaimanLipi", Font.PLAIN, 18);
                lblMeaning.setFont(fontBn);
                
                lblSearchWord.setText("<html>" + eng + "</html");
                lblSrchWord.setVisible(true);
                lblSrchWord.setText(txtSearch.getText());
                bnFull = "<html>" + bnFull + "</html>";
                lblMeaning.setText(bnFull);
                txtSearch.selectAll(); 
            } else if (conn != null && engSelected == false) {
                                               
                // Select Database Table
                query = "SELECT * FROM words WHERE bn='" + txtSearch.getText() + "'";
        
                // create the java statement
                Statement st = conn.createStatement();
        
                // execute the query, and get a java resultset
                ResultSet rs = st.executeQuery(query);

                // iterate through the java resultset
                while (rs.next())
                  {
                    eng = rs.getString("eng");
                    bn = rs.getString("bn");
                    antonym = rs.getString("antonym");
                                        
                    if(engFull.isEmpty()) {
                        engFull = eng;
                    }else {
                        engFull = engFull + ", " + eng;
                    }
                    
                    if(antonymFull.isEmpty()) {
                        antonymFull = antonym;
                    }else {
                        antonymFull = antonymFull + ", " + antonym;
                    }
                  }
                conn.close();
                //to display English word, Bangla Meaning and Antonym 
                if(antonymFull.isEmpty()){
                    lblAntonymTitle.setVisible(false);
                    lblAntonym.setVisible(false);
                }else {
                    lblAntonymTitle.setVisible(true);
                    lblAntonym.setVisible(true);
                    lblAntonymTitle.setText("Antonym:");
                    antonymFull = "<html>" + antonymFull + "</html>";
                    lblAntonym.setText(antonymFull);
                }
                
                //Creating font object to change the font and font size to fix the font problem 
                Font fontBn = new Font("SolaimanLipi", Font.PLAIN, 20);
                lblSearchWord.setFont(fontBn);
                Font fontEn = new Font("Arial", Font.PLAIN, 14);
                lblMeaning.setFont(fontEn);
                                
                lblSearchWord.setText("<html>" + bn + "</html>");
                lblSrchWord.setVisible(false);
                engFull = "<html>" + engFull + "</html>";
                lblMeaning.setText(engFull);
                txtSearch.selectAll(); 
            }
           else {
                JOptionPane.showMessageDialog(null, "Database connection fail!");
            }
        } catch (SQLException | ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        } 
    } //searchWord 
    
    //getWordImage search word meaning as an image from image data folder 
    public void getWordImage() {
        try{
            //to get the first character of a string 
            String s = txtSearch.getText(); 
            String firstChacter = s.substring(0,1);
            
            //display word meaning as an image 
            ImageIcon imgIcon = new ImageIcon("db/dataAsImage/" + firstChacter + "/" + txtSearch.getText() + ".png");
            lblImgWord.setIcon(imgIcon);
        }catch(Exception e)
        {
            
        }
    } //getWordImage search word meaning as an image from image data folder 
    
    //sortList - sort the list item of suggestion list 
    public void sortList(JList list) {
        try{
            ListModel model = list.getModel();

            int n = model.getSize();
            String[] data = new String[n];

            for (int i=0; i<n; i++) {
            data[i] = (String) model.getElementAt(i);
            }

            Arrays.sort(data);

            list.setListData(data);
        }catch(Exception e){

        }
    } //sortList Method 
    
    //getWords when typing - suggestion word only for English  from 'dict.db' database 
    public void getSuggestionWords() {
        try{
            Class.forName("org.sqlite.JDBC");
            String dbURL = "jdbc:sqlite:db\\dict.db";
            Connection conn = DriverManager.getConnection(dbURL);
           if (conn != null && engSelected == true) {
               
               //Advance Search - search by which is equal to the search word or start with 'able%' or which end with '%able' 
               int advanceSearch = cmbAdvanceSearch.getSelectedIndex();
               
               if(advanceSearch == 0) 
               {
                   // Select Database Table
                   query = "SELECT * FROM words WHERE eng LIKE '" + txtSearch.getText() + "%' COLLATE NOCASE"; //COLLATE NOCASE - case dosn't matter UPPER or lower or another  
               }else if(advanceSearch == 1) 
               {
                   // Select Database Table
                   query = "SELECT * FROM words WHERE eng LIKE '" + txtSearch.getText() + "%' COLLATE NOCASE"; //COLLATE NOCASE - case dosn't matter UPPER or lower or another  
               }else  
               {
                   // Select Database Table
                   query = "SELECT * FROM words WHERE eng LIKE '%" + txtSearch.getText() + "' COLLATE NOCASE"; //COLLATE NOCASE - case dosn't matter UPPER or lower or another  
               } //Advance Search - search by which is equal to the search word or start with 'able%' or which end with '%able'  
        
                // create the java statement
                Statement st = conn.createStatement();
        
                // execute the query, and get a java resultset
                ResultSet rs = st.executeQuery(query);
                
                // iterate through the java resultset
                dm = new DefaultListModel();  
                lstSuggestion.setModel(dm);
                
                int count = 0;
                while (rs.next())
                  {
                      if(count<=totalSuggestionWords) //totalSuggestionWords
                      {
                        eng = rs.getString("eng");
                        dm.addElement(eng);
                        count++;
                      }
                  }
                conn.close();
            } //Suggestion for English 
           else if (conn != null && engSelected == false) {
                 
               //Advance Search - search by which is equal to the search word or start with 'able%' or which end with '%able' 
               int advanceSearch = cmbAdvanceSearch.getSelectedIndex();
               
               if(advanceSearch == 0) 
               {
                   // Select Database Table
                   query = "SELECT * FROM words WHERE bn LIKE '" + txtSearch.getText() + "%'";
               }else if(advanceSearch == 1) 
               {
                   // Select Database Table
                   query = "SELECT * FROM words WHERE bn LIKE '" + txtSearch.getText() + "%'";
               }else  
               {
                   // Select Database Table
                   query = "SELECT * FROM words WHERE bn LIKE '%" + txtSearch.getText() + "'";
               } //Advance Search - search by which is equal to the search word or start with 'able%' or which end with '%able'  
               
                // create the java statement
                Statement st = conn.createStatement();
        
                // execute the query, and get a java resultset
                ResultSet rs = st.executeQuery(query);
                
                // iterate through the java resultset
                dm = new DefaultListModel();  
                lstSuggestion.setModel(dm);
               
                int count = 0;
                while (rs.next())
                  {
                      if(count<=totalSuggestionWords) //totalSuggestionWords
                      {
                        bn = rs.getString("bn");
                        dm.addElement(bn);
                        count++;
                      }
                  }
                conn.close();
            } //Suggestion for Bangla 
        } catch (Exception e) {
            
        }
        
    } //getSuggestionWords 
    
    //getMoreSuggestionWordEngDef when typing - suggestion word only for English  from 'gutenberg.sqlite' database - it changes the database 
    public void getMoreSuggestionWordsEngDef() {
        try{
            Class.forName("org.sqlite.JDBC");
            String dbURL = "jdbc:sqlite:db\\gutenberg.sqlite";
            Connection conn = DriverManager.getConnection(dbURL);
           if (conn != null && engSelected == true) {
               
               //Advance Search - search by which is equal to the search word or start with 'able%' or which end with '%able' 
               int advanceSearch = cmbAdvanceSearch.getSelectedIndex();
               
               if(advanceSearch == 0) 
               {
                   // Select Database Table
                   query = "SELECT * FROM entries WHERE word LIKE '" + txtSearch.getText() + "%' COLLATE NOCASE"; //COLLATE NOCASE - case dosn't matter UPPER or lower or another  
               }else if(advanceSearch == 1) 
               {
                   // Select Database Table
                   query = "SELECT * FROM entries WHERE word LIKE '" + txtSearch.getText() + "%' COLLATE NOCASE"; //COLLATE NOCASE - case dosn't matter UPPER or lower or another  
               }else  
               {
                   // Select Database Table
                   query = "SELECT * FROM entries WHERE word LIKE '%" + txtSearch.getText() + "' COLLATE NOCASE"; //COLLATE NOCASE - case dosn't matter UPPER or lower or another  
               } //Advance Search - search by which is equal to the search word or start with 'able%' or which end with '%able'  
        
                // create the java statement
                Statement st = conn.createStatement();
        
                // execute the query, and get a java resultset
                ResultSet rs = st.executeQuery(query);
                
                // iterate through the java resultset
                dm = new DefaultListModel();  
                lstSuggestion.setModel(dm);
                
                int count = 0;
                String word; 
                while (rs.next())
                  {
                      if(count<=totalSuggestionWords) //totalSuggestionWords
                      {
                        word = rs.getString("word");
                        dm.addElement(word);
                        count++;
                      }
                  }
                conn.close();
            } //Suggestion for English 
        } catch (Exception e) {
            
        }
    } //getMoreSuggestionWordEngDef when typing - suggestion word only for English  from 'gutenberg.sqlite' database - it changes the database 
    
    //getWords when typing - suggestion word only for English Definition from another 'gutenberg.sqlite' database 
    public void trySimilarWord() {
        try{
            Class.forName("org.sqlite.JDBC");
            String dbURL = "jdbc:sqlite:db\\gutenberg.sqlite";
            Connection conn = DriverManager.getConnection(dbURL);
           if (conn != null && engSelected == true) {
               
                //get real word which is included in English definition database 
                String s = txtSearch.getText(); 
                int totalString = s.length()-1;
                StringBuilder sb = new StringBuilder(s);
                sb.deleteCharAt(totalString); //delete a caracter from last of the search word  
                String realWord = sb.toString();
                txtSearch.setText(realWord);
                
                //Advance Search - search by which is equal to the search word or start with 'able%' or which end with '%able' 
               int advanceSearch = cmbAdvanceSearch.getSelectedIndex();
               
               if(advanceSearch == 0) 
               {
                   // Select Database Table
                   query = "SELECT * FROM entries WHERE word LIKE '" + txtSearch.getText() + "%' COLLATE NOCASE"; //COLLATE NOCASE - case dosn't matter UPPER or lower or another  
               }else if(advanceSearch == 1) 
               {
                   // Select Database Table
                   query = "SELECT * FROM entries WHERE word LIKE '" + txtSearch.getText() + "%' COLLATE NOCASE"; //COLLATE NOCASE - case dosn't matter UPPER or lower or another  
               }else  
               {
                   // Select Database Table
                   query = "SELECT * FROM entries WHERE word LIKE '%" + txtSearch.getText() + "' COLLATE NOCASE"; //COLLATE NOCASE - case dosn't matter UPPER or lower or another  
               } //Advance Search - search by which is equal to the search word or start with 'able%' or which end with '%able'  
        
                // create the java statement
                Statement st = conn.createStatement();
        
                // execute the query, and get a java resultset
                ResultSet rs = st.executeQuery(query);
                
                // iterate through the java resultset
                dm = new DefaultListModel();  
                lstSuggestion.setModel(dm);
                
                int count = 0;
                while (rs.next())
                  {
                      if(count<=totalSuggestionWords) //totalSuggestionWords
                      {
                        String word = rs.getString("word");
                        dm.addElement(word);
                        count++;
                      }
                  }
                conn.close();
            } //trySimilarWord - only for English definition 
        } catch (Exception e) {
            
        }
        
    } //getWords when typing - suggestion word only for English Definition from another SQLite database 
    
    
    //get English Definition from 'gutenberg.sqlite' database 
    public void getEngDefinition() {
        try {
            
            Class.forName("org.sqlite.JDBC");
            String dbURL = "jdbc:sqlite:db\\gutenberg.sqlite";
            Connection conn = DriverManager.getConnection(dbURL);
           if (conn != null && engSelected == true) {
                                               
                // Select Database Table
                query = "SELECT * FROM entries WHERE word='" + txtSearch.getText() + "' COLLATE NOCASE";
        
                // create the java statement
                Statement st = conn.createStatement();
        
                // execute the query, and get a java resultset
                ResultSet rs = st.executeQuery(query);
                String word = "";
                int count=1;
                // iterate through the java resultset
                while (rs.next())
                  {
                    word = rs.getString("word");
                    wordtype = rs.getString("wordtype");
                    definition = rs.getString("definition");

                    if(definitionFull.isEmpty()) {
                        definitionFull = "(" + count + ")" + " /" + wordtype + "/ " + definition + "<br><br>"; 
                        count++;
                    }else {
                        definitionFull = definitionFull + " (" + count + ") " + " /" + wordtype + "/ " + definition + "<br><br>";
                        count++;
                    }
                  }
                conn.close();
                //to display English word with English Definition 
                if(definitionFull.isEmpty()){
                    lblEnglishDefTitle.setVisible(false);
                    lblEngDef.setVisible(false);
                }else {
                    lblSrchWord.setText(txtSearch.getText()); //to display the search word for minimum one meaning 
                    lblEnglishDefTitle.setVisible(true);
                    lblEngDef.setVisible(true);
                    lblEnglishDefTitle.setText("English Definition:");
                    lblEngDef.setText("<html><font size='5'><b>" + word + "</b></font><br>"+ definitionFull + "</html");
                }
            } 
        } catch (SQLException | ClassNotFoundException ex) {
            //System.out.println(ex.getMessage());
        } 
    } //get English Definition from 'gutenberg.sqlite' database 
    
    /*====================    End of my own code       ======================*/
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(myWordDictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(myWordDictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(myWordDictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(myWordDictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try
                {
                    Thread.sleep(2000); //2000 milliseconds that means 2 seconds 
                }	
                    catch(Exception e)
                {
                }

                new myWordDictionary().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEB;
    private javax.swing.JButton btnEB1;
    private javax.swing.JButton btnEngDefSuggestion;
    private javax.swing.JLabel btnHelp;
    private javax.swing.JButton btnMoreSuggestion;
    private javax.swing.JLabel btnSearch;
    private javax.swing.JButton btnSpeak;
    private javax.swing.JComboBox<String> cmbAdvanceSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAntonym;
    private javax.swing.JLabel lblAntonymTitle;
    private javax.swing.JLabel lblBackGround;
    private javax.swing.JLabel lblCopyRight;
    private javax.swing.JLabel lblEngDef;
    private javax.swing.JLabel lblEnglishDefTitle;
    private javax.swing.JLabel lblImgWord;
    private javax.swing.JLabel lblMeaning;
    private javax.swing.JLabel lblSearchWord;
    private javax.swing.JLabel lblSrchWord;
    private javax.swing.JList<String> lstSuggestion;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
